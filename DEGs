
KIRC<- load("pathway/.../KIRC_geneExpression_allGenes.RData")
library(dplyr)
library(ggplot2)
library(glmnet)
library(pROC)
library(gmodels)
library(caret)
library(e1071)
library(DESeq2)

clinical_df <- data.frame(clinicalInfo)
genes_df <- data.frame(readCounts)

# head(clinical_df)
# head(genes_df)
# Change the name of or column of interest to metastases
colnames(clinical_df)[9] <- "Metastases"
colnames(clinical_df)[1] <- "Age"
colnames(clinical_df)[8] <- "Sex"
# Remove columns with at least 1/3 of the rows with NA values
num_rows <- nrow(clinical_df)
threshold <- num_rows / 3
columns_to_keep <- sapply(clinical_df, function(col) sum(is.na(col)) <= threshold)
clinical_df <- clinical_df[, columns_to_keep]


colnames(genes_df) <- gsub("\\.\\d+$", "", colnames(genes_df))

clinical_df <- clinical_df[order(row.names(clinical_df)), ]


sum(duplicated(row.names(genes_df)))
which(is.na(genes_df))

# Verify if the sample names match
all(colnames(genes_df) %in% row.names(clinical_df))
all(colnames(genes_df) == row.names(clinical_df))


patients_to_remove <- rownames(clinical_df)[clinical_df$Metastases == "mx" | is.na(clinical_df$Metastases)]
ClinicalInfo <- clinical_df[!rownames(clinical_df) %in% patients_to_remove, ]
pattern_to_remove <- paste(patients_to_remove, collapse = "|")

columns_to_remove <- grep(pattern_to_remove, colnames(genes_df), value = TRUE)
CountData <- genes_df[, !colnames(genes_df) %in% columns_to_remove]

# Verify if the sample names match
all(colnames(CountData) %in% row.names(ClinicalInfo))
all(colnames(CountData) == row.names(ClinicalInfo))




################## EDA #################
############ SURVIVAL ANALYSIS ############
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
library(ggsurvplot)
#install.packages("survminer")
library(survminer)

df_survival <- subset(clinical_filtered, select = c(2, 3, 9))
df_survival[, 1] <- as.numeric(df_survival[, 1])
df_survival[, 2] <- as.numeric(df_survival[, 2])
df_survival <- na.omit(df_survival)

str(df_survival)

km_fit <- survfit(Surv(days_to_death, vital_status) ~ 1, data=df_survival)
summary(km_fit, times = c(1,30,60,90*(1:10)))
km_trt_fit <- survfit(Surv(days_to_death, vital_status) ~ pathology_M_stage, data=df_survival)
autoplot(km_trt_fit)
ggsurvplot(km_trt_fit, data = df_survival, pval = TRUE, palette = "npg", main = "Survival curve", legend.title = "",
           legend.labs = c("No Metastasis", "Metastasis"),)

#############################################
########### HISTOGRAM OF COUNTS #############
ggplot(CountData) +
  geom_histogram(aes(x = TCGA.3Z.A93Z), stat = "bin", bins = 200) +
  xlab("Raw expression counts") +
  ylab("Number of genes")


#################### PCA #####################
CountData <- round(CountData, 0)
## Create DESeq2Dataset object


dds <- DESeqDataSetFromMatrix(CountData, colData = ClinicalInfo, design = ~ Metastases)

dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
rld <- vst(dds, blind=TRUE)
rld_mat <- assay(rld) # Extract the rlog matrix from the object


pca.res <- pca(rld_mat, metadata=ClinicalInfo)
biplot(pca.res, lab="", colby="Metastases", hline = 0, vline = 0,legendPosition = 'right') 
# Biplot with colors by response
# Potential outliers: TCGA.A3.3313, TCGA.DV.5567, TCGA.BP.4760, TCGA.DV.5576

biplot(pca.res, x="PC1", y="PC2",lab="",colby="Metastases", hline = 0, vline = 0,legendPosition = 'top') # Biplot with PC1 and PC3
pairsplot(pca.res, colby="Metastases")
pairsplot(pca.res)


rld_cor <- cor(rld_mat)
pheatmap(rld_cor, annotation = metadata)

dds <- DESeq(dds)
plotDispEsts(dds)

contrast <- c("Metastases", "m1", "m0")
results_table <- results(dds, contrast=contrast, alpha = 0.01)

d <- results_table %>% 
  data.frame() %>% 
  View()

write.table(d, file="d.csv", sep="\t", quote=F, col.names=NA)

knitr::kable(d, caption = "Results table") %>%
  kable_styling(font_size = 10)

results_table[which(results_table$baseMean == 0),] %>% 
  data.frame() %>% 
  head()
sum(results_table$baseMean == 0)

results_table[which(is.na(results_table$pvalue) & 
                      is.na(results_table$padj) &
                      results_table$baseMean > 0),] %>% 
  data.frame() %>% 
  head()

sum(is.na(results_table$pvalue) & 
      is.na(results_table$padj) &
      results_table$baseMean > 0)


results_table[which(!is.na(results_table$pvalue) & 
                      is.na(results_table$padj) & 
                      results_table$baseMean > 0),] %>% 
  data.frame() %>% 
  head()

sum(!is.na(results_table$pvalue) & 
      is.na(results_table$padj) & 
      results_table$baseMean > 0)


plotMA(results_table, ylim=c(-2,2))
results_table <- lfcShrink(dds, coef="Metastases_m1_vs_m0", type="apeglm")
plotMA(results_table, ylim=c(-2,2))

padj.threshold <- 0.01
summary(results_table, alpha = padj.threshold)

# out of 17659 with nonzero total read count
#adjusted p-value < 0.01
#LFC > 0 (up)       : 2670, 15%
#LFC < 0 (down)     : 1343, 7.6%
#outliers [1]       : 0, 0%
#low counts [2]     : 687, 3.9%
#(mean count < 0)
#[1] see 'cooksCutoff' argument of ?results
#[2] see 'independentFiltering' argument of ?results

# Subset the results table to only include those that are significant:


results_tab <- results_table %>%
  data.frame() %>%
  rownames_to_column(var="ID") %>% 
  as_tibble()

significant <- results_tab %>%
  dplyr::filter(padj < padj.threshold)


### Extract normalized expression for significant genes from the OE and control samples (2:4 and 7:9)
norm_OEsig <- normalized_counts[,c(1:155)] %>% 
  dplyr::filter(ID %in% significant$ID)  


####### Visualizing the results: DEG #########


ClinicalInfoFiltered <- ClinicalInfo[,]
response_Info <- ClinicalInfoFiltered %>% 
  rownames_to_column(var="Sample") %>% 
  as_tibble()

normalized_counts <- counts(dds, normalized=T) %>% 
  data.frame() %>%
  rownames_to_column(var="Gene") 





d <- plotCounts(dds, gene="UGT1A10", intgroup="Metastases", returnData=TRUE)
ggplot(d, aes(x = Metastases, y = count, color = Metastases)) + 
  geom_point(position=position_jitter(w = 0.1,h = 0)) +
  geom_text_repel(aes(label = rownames(d))) + 
  theme_bw() +
  ggtitle("Expression of SLC12A3") +
  theme(plot.title = element_text(hjust = 0.5))






#Plot expression for the top 20 differential expressed genes

# Order the results by adjusted p-values
top20_sig_genes <- results_tab %>% 
  arrange(padj) %>%
  pull(ID) %>%
  head(n=20)
top20_sig_normalized <- normalized_counts %>%
  filter(Gene %in% top20_sig_genes)

# Gathering the columns to have normalized counts to a single column
gathered_top20_sig <- top20_sig_normalized %>%
  gather(colnames(top20_sig_normalized)[2:156], key = "Sample", value = "NormalizedCounts")

gathered_top20_sig <- inner_join(response_Info, gathered_top20_sig)
## plot using ggplot2
ggplot(gathered_top20_sig) +
  geom_point(aes(x = Gene, y = NormalizedCounts, color = Metastases)) +
  scale_y_log10() +
  xlab("Genes") +
  ylab("log10 Normalized Counts") +
  ggtitle("Top 20 significant differential expressed genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title = element_text(hjust = 0.5))


########### Volcano Plot ###############

results_tab <- results_tab %>% 
  dplyr::mutate(threshold = padj < 0.01 & abs(log2FoldChange) >= 1)


results_tab <- results_tab %>% dplyr::mutate(genelabels = "")
results_tab <- results_tab %>% dplyr::arrange(padj)
results_tab$genelabels[1:10] <- as.character(results_tab$ID[1:10])

ggplot(results_tab, aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point(aes(colour = threshold)) +
  geom_text_repel(aes(label = genelabels)) +
  ggtitle("Volcano Plot") +
  xlab("log2 fold change") + 
  ylab("-log10 adjusted p-value") +
  scale_colour_manual(values = c("#F4A582", "#92C5DE")) +
  theme(legend.position = "none",
        plot.title = element_text(size = rel(1.5), hjust = 0.5),
        axis.title = element_text(size = rel(1.25))) 



DEG <- results_tab %>%
  dplyr::filter(padj < padj.threshold)
dim(DEG)

DEG <- subset(DEG, select = c(1:6))
dim(DEG)
write.table(DEG, file="DEG.csv", sep="\t", quote=F, col.names=NA)


sessionInfo()



###################### FUNCTION ANALYSIS ##########################
#### GENOMIC ANOTATION #####
# Load libraries
library(AnnotationHub)
library(ensembldb)
# Connect to AnnotationHub
ah <- AnnotationHub()
ah
# Query AnnotationHub
human_ens <- query(ah, c("Homo sapiens", "EnsDb"))
# Extract annotations of interest
human_ens <- human_ens[["AH116291"]]
# Extract gene-level information
genes(human_ens, return.type = "data.frame") %>% View()

# Create a gene-level dataframe 
annotations_ahb <- genes(human_ens, return.type = "data.frame")  %>%
  dplyr::select(gene_id, gene_name, entrezid, gene_biotype) %>% 
  dplyr::filter(gene_name %in% results_tab$ID)




# Wait a second, we don't have one-to-one mappings!
class(annotations_ahb$entrezid)
which(map(annotations_ahb$entrezid, length) > 1)
annotations_ahb$entrezid <- map(annotations_ahb$entrezid,1) %>%  unlist()
which(is.na(annotations_ahb$gene_name)) %>% length()
which(duplicated(annotations_ahb$gene_name)) %>% length()
# Determine the indices for the non-duplicated genes
non_duplicates_idx <- which(duplicated(annotations_ahb$gene_name) == FALSE)
# How many rows does annotations_ahb have?
annotations_ahb %>% nrow()
# Return only the non-duplicated genes using indices
annotations_ahb <- annotations_ahb[non_duplicates_idx, ]
# How many rows are we left with after removing?
annotations_ahb %>% nrow()
# Determine how many of the Entrez column entries are NA
which(is.na(annotations_ahb$entrezid)) %>%  length()

##################################


library(DOSE)
library(pathview)
library(clusterProfiler)
library(org.Hs.eg.db)


##keep genes with padj != NA, the ones that were tested
res_table_tb_noNAs <- filter(resul, padj != "NA" )
## Merge the AnnotationHub dataframe with the results 
res_ids <- left_join(res_table_tb_noNAs, annotations_ahb, by=c("ID"="gene_name")) 

sig <-  left_join(sig, annotations_ahb, by=c("ID"="gene_name")) 

## Create background dataset for hypergeometric testing using DEG tested genes             
all_genes <- as.character(res_ids$gene_id)

#common_genes<- c("C16orf86","CITED2","CTAGE4","CTSG","GLB1L3","HOXD1","IL2", "PPIAL4G", "PRDM8","TMEM81")

## Run GO enrichment analysis 

# Filter annotations_ahb based on common_genes
common_genes_table <- annotations_ahb[annotations_ahb$gene_name %in% significant$ID, ]
sig_genes <- as.character(common_genes_table$gene_id)


ego_all <- enrichGO(gene = sig_genes, 
                    universe = all_genes,
                    keyType = "ENSEMBL",
                    OrgDb = org.Hs.eg.db, 
                    ont = "ALL", 
                    pAdjustMethod = "BH", 
                    qvalueCutoff = 0.05, 
                    readable = TRUE)


## Output results from GO analysis to a table
cluster_summary <- data.frame(ego_all)

write.csv(cluster_summary, "clusterProfiler.csv")
save(ego_all, file="ego_all.rda")


## Dotplot 
dotplot(ego_all, showCategory=50)



# ENRICHMENT GO PLOT - EMAPPLOT
## Add similarity matrix to the termsim slot of enrichment result
ego <- enrichplot::pairwise_termsim(ego_all)
## Enrichmap clusters the 50 most significant (by padj) GO terms to visualize relationships between terms
emapplot(ego, showCategory = 48, cex_label_category = 0.7)



# CATEGORY NETPLOT - Cnetplot

## To color genes by log2 fold changes, we need to extract the log2 fold changes from our results table creating a named vector
foldchanges <- significant$log2FoldChange
names(foldchanges) <- significant$ID
## Cnetplot details the genes associated with one or more terms - by default gives the top 5 significant terms (by padj)
cnetplot(ego, 
         showCategory = 5, 
         color.params=list(foldChange=foldchanges),
         vertex.label.font=6)



############## Preparation for GSEA ##############

## Remove any NA values (reduces the data by quite a bit)
res_entrez <- dplyr::filter(res_ids, entrezid != "NA")
## Remove any Entrez duplicates
res_entrez <- res_entrez[which(duplicated(res_entrez$entrezid) == F), ]
## Extract the foldchanges
foldchanges <- res_entrez$log2FoldChange

## Name each fold change with the corresponding Entrez ID
names(foldchanges) <- res_entrez$entrezid

## Sort fold changes in decreasing order
foldchanges <- sort(foldchanges, decreasing = TRUE)
head(foldchanges)

set.seed(1)
## GSEA using gene sets from KEGG pathways
gseaKEGG <- gseKEGG(geneList = foldchanges, # ordered named vector of fold changes (Entrez IDs are the associated names)
                    organism = "hsa",
                    minGSSize = 20, # minimum gene set size (# genes in set) - change to test more sets or recover sets with fewer # genes
                    pvalueCutoff = 0.05, # padj cutoff value
                    verbose = FALSE)
## Extract the GSEA results
gseaKEGG_results <- gseaKEGG@result

# Write results to file
write.csv(gseaKEGG_results, "gseaOE_kegg.csv", quote=F)

## Example Code
gseaKEGG_geneSymbol <- setReadable(gseaKEGG, OrgDb = org.Hs.eg.db, keyType="ENTREZID")
## Plot the GSEA plot for a single enriched pathway, `hsa04658`
gseaplot(gseaKEGG, geneSetID = 'hsa04060')


detach("package:dplyr", unload=TRUE) # first unload dplyr to avoid conflicts
## Output images for a single significant KEGG pathway
pathview(gene.data = foldchanges,
         pathway.id = "hsa04658",
         species = "hsa",
         limit = list(gene = 2, # value gives the max/min limit for foldchanges
                      cpd = 1))

## Output images for all significant KEGG pathways
get_kegg_plots <- function(x) {
  pathview(gene.data = foldchanges, 
           pathway.id = gseaKEGG_results$ID[x], 
           species = "hsa",
           limit = list(gene = 2, cpd = 1))
}

purrr::map(1:length(gseaKEGG_results$ID), 
           get_kegg_plots)


sessionInfo()


